<?php
	require __DIR__.'./../utils/utilities.php';
	
	// Constants
	const STRING_LENGTH = 128;
	
	class User {
		// Properties
		private $ID;
		private $FirstName;
		private $LastName;
		private $Email;
		
		public function __construct() {
			$this->ID = NULL;
			$this->FirstName = NULL;
			$this->LastName = NULL;
			$this->Email = NULL;
		}
		
		// Getters
		public function getID(): ?int {
			return $this->ID;
		}
		public function getFirstName(): ?string {
			return $this->FirstName;
		}
		public function getLastName(): ?string {
			return $this->LastName;
		}
		public function getEmail(): ?string {
			return $this->Email;
		}
		
		// Utilities
		public function isValidString(string $value): bool {
			if (strlen($value) > STRING_LENGTH || strlen($value) == 0)
				return False;
			return True;
		}

		public function isValidEmail(string $email): bool {
			if ($this->isValidString($email) && filter_var($email, FILTER_VALIDATE_EMAIL)){
				$domain = explode("@",$email);
				if (!is_null($domain) && array_key_exists(1, $domain) && checkdnsrr($domain[1], 'MX'))
					return True;
			}
			return False;
		}

		public function isAdmin(): bool {
			global $PDO;
			global $SCHEMA;

			if (!isset($this->ID)) {
				return False;
			}
			
			$query = "SELECT id from " . $SCHEMA . ".Admin WHERE (ID_User = :id)";
			$values = array(":id" => $this->ID);
			
			try {
				$search = $PDO->prepare($query);
				$search->execute($values);
			} catch (PDOException $exception) {
				throw new Exception("Database failure!");
			}

			$rows = $search->fetch(PDO::FETCH_ASSOC);
			
			if (is_array($rows)) {
				return True;
			}
			
			return False;
		}

		public function getIdFromEmail(string $email): ?int {
			global $PDO;
			global $SCHEMA;
			
			if (!$this->isValidEmail($email))
				return NULL;
			
			$query = "SELECT id from " . $SCHEMA . ".User WHERE (Email = :email)";
			$values = array(":email" => $email);
			
			try {
				$search = $PDO->prepare($query);
				$search->execute($values);
			} catch (PDOException $exception) {
				throw new Exception("Database failure!");
			}
			$rows = $search->fetch(PDO::FETCH_ASSOC);
			
			if (is_array($rows))
				return intval($rows["id"], 10);
			
			return NULL;
		}
		
		// CRUD
		public function createUser(string $firstname, string $lastname, string $email, string $password): ?int {
			global $PDO;
			global $SCHEMA;
			
			if (!$this->isValidString($firstname) or !$this->isValidString($lastname) or !$this->isValidString($email) or !$this->isValidString($password))
				return NULL;
			if (!$this->isValidEmail($email) or !is_null($this->getIdFromEmail($email)))
				return NULL;
			
			$query = "INSERT INTO User (FirstName, LastName, Email, Password) VALUES (:firstname, :lastname, :email, :password)";
			$hash = password_hash($password, PASSWORD_ARGON2ID);
			$values = array(":firstname" => $firstname, ":lastname" => $lastname, ":email" => $email, ":password" => $hash);
			
			try {
				$insert = $PDO->prepare($query);
				$insert->execute($values);
			} catch (PDOException $exception) {
				throw new Exception('Database failure!');
			}
			
			return $PDO->lastInsertId();
		}
		
		// Session Management
		private function registerLoginSession() {
			global $PDO;
			global $SCHEMA;
			
			if (session_status() == PHP_SESSION_ACTIVE && !is_null($this->ID)) {
				$query = "REPLACE INTO " . $SCHEMA . ".Session (User_ID, Session_ID, Start_Date) VALUES (:user_id, :session_id, NOW())";
				$values = array(":user_id" => $this->ID, ":session_id" => session_id());
				
				try {
					$replace = $PDO->prepare($query);
					$replace->execute($values);
				} catch (PDOException $exception){
					throw new Exception("Database failure!");
				}
			}
		}

		public function login(string $email, string $password): bool {
			global $PDO;
			global $SCHEMA;
			
			if (!$this->isValidString($password) or !$this->isValidString($email)) {
				return False;
			}
			
			$query = "SELECT * FROM " . $SCHEMA . ".User WHERE (Email = :email)";
			$values = array(":email" => $email);
			
			try {
				$search = $PDO->prepare($query);
				$search->execute($values);
			} catch (PDOException $exception){
				throw new Exception("Database failure!");
			}

			$rows = $search->fetch(PDO::FETCH_ASSOC);
			
			if (is_array($rows) && password_verify($password, $rows['Password'])) {
				$this->ID = intval($rows["ID"], 10);
				$this->Email = $email;
				$this->FirstName = $rows["FirstName"];
				$this->LastName = $rows["LastName"];

				$this->registerLoginSession();
				
				return True;
			}
			
			return False;
		}

		public function sessionLogin(): bool {
			global $PDO;
			global $SCHEMA;
			
			$session_email_present = !empty($_SESSION['email']);
			$session_email = $session_email_present ? cleanInput($_SESSION['email']) : NULL;
			
			if (session_status() == PHP_SESSION_ACTIVE && $session_email_present == True) {
				$query = "SELECT * FROM " . $SCHEMA . ".Session s JOIN " . $SCHEMA . ".User u ON s.User_ID = u.ID WHERE u.Email = :email AND Session_ID = :session_id AND Start_Date >= (NOW() - INTERVAL 7 DAY)";
				$values = array(':session_id' => session_id(), ':email' => $session_email);
				
				try {
					$search = $PDO->prepare($query);
					$search->execute($values);
				} catch(PDOException $exception) {
					throw new Exception("Database failure session login!");
				}

				// Returns false if no results
				$rows = $search->fetch(PDO::FETCH_ASSOC);

				if (is_array($rows)){
					$this->ID = intval($rows["ID"], 10);
					$this->Email = $session_email;
					$this->FirstName = $rows["FirstName"];
					$this->LastName = $rows["LastName"];
					
					return True;
				}
			}
			return False;
		}

		public function logout() {
			global $PDO;
			global $SCHEMA;
			
			$session_email_present = !empty($_SESSION['email']);
			$session_email = $session_email_present ? cleanInput($_SESSION['email']) : NULL;
			
			// TODO: Verify if valid session id.
			if (session_status() != PHP_SESSION_ACTIVE || $session_email_present == False)
				error();
			
			$user_id = $this->getIdFromEmail($session_email);
			if (is_null($user_id))
				error();
			
			$this->ID = NULL;
			$this->FirstName = NULL;
			$this->LastName = NULL;
			$this->Email = NULL;
			
			$query = "DELETE FROM " . $SCHEMA . ".Session WHERE (User_ID = :user_id AND Session_ID = :session_id)";
			$values = array(':session_id' => session_id(), ":user_id" => $user_id);
			
			try {
				$delete = $PDO->prepare($query);
				$delete->execute($values);
			} catch(PDOException $exception) {
				throw new Exception("Database failure!");
			}
		}
	}
?>
